/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 custom_rabbit.glb -t
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Head: THREE.Mesh;
    Body: THREE.Mesh;
    mouth: THREE.Mesh;
    Ear_2: THREE.Mesh;
    body_2: THREE.Mesh;
    eyes: THREE.Mesh;
    tail: THREE.Mesh;
    moustache: THREE.Mesh;
    eyebrow: THREE.Mesh;
    nose: THREE.Mesh;
    heart_glasses: THREE.Mesh;
    magic_object: THREE.Mesh;
    magic_object_1: THREE.Mesh;
    angel_wing: THREE.Mesh;
    star_glasses: THREE.Mesh;
    alien_glasses: THREE.Mesh;
    circle_glasses: THREE.Mesh;
    arab_object: THREE.Mesh;
    arab_object_1: THREE.Mesh;
    angel_hat: THREE.Mesh;
    santa_object: THREE.Mesh;
    santa_object_1: THREE.Mesh;
    carrot: THREE.Mesh;
    vampire_object: THREE.Mesh;
    vampire_object_1: THREE.Mesh;
    bat_object: THREE.Mesh;
    bat_object_1: THREE.Mesh;
    balloon_object: THREE.Mesh;
    balloon_object_1: THREE.Mesh;
    mouse_cap: THREE.Mesh;
    yellow_cap: THREE.Mesh;
    ddong_glasses: THREE.Mesh;
    my_glasses: THREE.Mesh;
  };
  materials: {
    ["bunny texturee"]: THREE.MeshStandardMaterial;
    ["Material.009"]: THREE.MeshStandardMaterial;
    ["Material.010"]: THREE.MeshStandardMaterial;
    ["Material.007"]: THREE.MeshStandardMaterial;
    ["Material.008"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
    heart_glasses_material: THREE.MeshStandardMaterial;
    magic_material_1: THREE.MeshStandardMaterial;
    magic_material_2: THREE.MeshStandardMaterial;
    angel_wing_material: THREE.MeshStandardMaterial;
    star_material: THREE.MeshStandardMaterial;
    alien_material: THREE.MeshStandardMaterial;
    circle_glasses_material: THREE.MeshStandardMaterial;
    arab_material_1: THREE.MeshStandardMaterial;
    arab_material_2: THREE.MeshStandardMaterial;
    angel_hat_material: THREE.MeshStandardMaterial;
    santa_material_1: THREE.MeshStandardMaterial;
    santa_materail_2: THREE.MeshStandardMaterial;
    carrot_material: THREE.MeshStandardMaterial;
    vampire_material1: THREE.MeshStandardMaterial;
    vampire_material2: THREE.MeshStandardMaterial;
    bat_object_1: THREE.MeshStandardMaterial;
    bat_object_2: THREE.MeshStandardMaterial;
    balloon_material_1: THREE.MeshStandardMaterial;
    balloon_material_2: THREE.MeshStandardMaterial;
    mousecap_material: THREE.MeshStandardMaterial;
    yellow_cap_material: THREE.MeshStandardMaterial;
    ddong_material: THREE.MeshStandardMaterial;
    mymaterial: THREE.MeshStandardMaterial;
  };
};
interface Item {
  [key: string]: string;
}
type Props = {
  position: number[];
  itemStatus?: Item;
};

export function Custom_rabbit({ position, itemStatus }: Props) {
  const { nodes, materials } = useGLTF("/3D/custom_rabbit.glb") as GLTFResult;

  // 안경 custom
  const selectGlasses = () => {
    switch (itemStatus?.glasses) {
      case "1":
        // 하트 안경
        return (
          <>
            <mesh
              geometry={nodes.heart_glasses.geometry}
              material={materials.heart_glasses_material}
              position={[-0.53, 2.81, 0.61]}
              rotation={[0.23, -0.74, 0.15]}
              scale={0.33}
            />
          </>
        );
      case "2":
        // 별 안경
        return (
          <>
            <mesh
              geometry={nodes.star_glasses.geometry}
              material={materials.star_material}
              position={[-0.49, 2.71, 0.52]}
              rotation={[3.12, -0.81, 3.14]}
              scale={0.31}
            />
          </>
        );
      case "3":
        // alien 안경
        return (
          <>
            <mesh
              geometry={nodes.alien_glasses.geometry}
              material={materials.alien_material}
              position={[-0.32, 2.82, 0.37]}
              rotation={[-3.14, -0.82, -3.13]}
              scale={0.42}
            />
          </>
        );
      case "4":
        // 동그란 안경
        return (
          <>
            <mesh
              geometry={nodes.circle_glasses.geometry}
              material={materials.circle_glasses_material}
              position={[-0.44, 2.71, 0.51]}
              rotation={[-3.1, -0.8, -3.05]}
              scale={0.3}
            />
          </>
        );
      // case "5":
      //   // 똥 안경
      //   return (
      //     <>
      //       <mesh
      //         geometry={nodes.ddong_glasses.geometry}
      //         material={materials.ddong_material}
      //         position={[-0.51, 2.91, 0.59]}
      //         rotation={[-3.13, -0.81, -2.91]}
      //         scale={0.27}
      //       />
      //     </>
      //   );
      case "5":
        return (
          <>
            <mesh
              geometry={nodes.my_glasses.geometry}
              material={materials.mymaterial}
              position={[-0.31, 2.71, 0.38]}
              rotation={[-3.13, -0.77, -3.12]}
              scale={0.39}
            />
          </>
        );
    }
  };
  // 모자 custom
  const selectHat = () => {
    switch (itemStatus?.hat) {
      case "1":
        // 천사 링
        return (
          <>
            <mesh
              geometry={nodes.angel_hat.geometry}
              material={materials.angel_hat_material}
              position={[-0.24, 4.65, 0.77]}
              rotation={[-1.62, 0.05, 0.44]}
              scale={0.36}
            />
          </>
        );
      case "2":
        // 아랍 모자
        return (
          <>
            <group
              position={[0.22, 1.83, -0.13]}
              rotation={[0.01, -0.66, -0.01]}
              scale={2.1}
            >
              <mesh
                geometry={nodes.arab_object.geometry}
                material={materials.arab_material_1}
              />
              <mesh
                geometry={nodes.arab_object_1.geometry}
                material={materials.arab_material_2}
              />
            </group>
          </>
        );
      case "3":
        // 마법 모자
        return (
          <>
            <group position={[0.07, 3.86, 0.03]} scale={0.79}>
              <mesh
                geometry={nodes.magic_object.geometry}
                material={materials.magic_material_1}
              />
              <mesh
                geometry={nodes.magic_object_1.geometry}
                material={materials.magic_material_2}
              />
            </group>
          </>
        );
      case "4":
        // 산타 모자
        return (
          <>
            <group
              position={[0.02, 2.92, 0.03]}
              rotation={[-1.58, 0.01, -2.43]}
              scale={[0.91, 0.92, 0.9]}
            >
              <mesh
                geometry={nodes.santa_object.geometry}
                material={materials.santa_material_1}
              />
              <mesh
                geometry={nodes.santa_object_1.geometry}
                material={materials.santa_materail_2}
              />
            </group>
          </>
        );
      case "5":
        // mouse cap
        return (
          <>
            <mesh
              geometry={nodes.mouse_cap.geometry}
              material={materials.mousecap_material}
              position={[0.02, 3.45, 0]}
              rotation={[-0.02, 0.77, 0.03]}
              scale={0.01}
            />
          </>
        );
      // case "6":
      //   return (
      //     <>
      //       <mesh
      //         geometry={nodes.yellow_cap.geometry}
      //         material={materials.yellow_cap_material}
      //         position={[-0.19, 4.45, -0.24]}
      //         rotation={[0.06, 0.12, -0.42]}
      //         scale={0.41}
      //       />
      //     </>
      //   );
    }
  };
  // 날개 custom
  const selectWing = () => {
    switch (itemStatus?.wing) {
      case "1":
        // 천사 날개
        return (
          <>
            <mesh
              geometry={nodes.angel_wing.geometry}
              material={materials.angel_wing_material}
              position={[0.1, -0.03, -0.12]}
              rotation={[-Math.PI, 0.81, -Math.PI]}
              scale={0.16}
            />
          </>
        );
      case "2":
        // 박쥐 날개
        return (
          <>
            <group
              position={[0.45, 1.05, -0.38]}
              rotation={[-1.36, -0.21, -0.8]}
              scale={0.44}
            >
              <mesh
                geometry={nodes.bat_object.geometry}
                material={materials.bat_object_1}
              />
              <mesh
                geometry={nodes.bat_object_1.geometry}
                material={materials.bat_object_2}
              />
            </group>
          </>
        );
      case "3":
        // 풍선
        return (
          <>
            <group
              position={[-0.76, 1.79, 0.71]}
              rotation={[0.23, -0.02, -0.15]}
              scale={-0.06}
            >
              <mesh
                geometry={nodes.balloon_object.geometry}
                material={materials.balloon_material_1}
              />
              <mesh
                geometry={nodes.balloon_object_1.geometry}
                material={materials.balloon_material_2}
              />
            </group>
          </>
        );
      case "4":
        // 뱀파이어 망토
        return (
          <>
            <group
              position={[0.09, 2.52, -0.09]}
              rotation={[0, -0.8, 0]}
              scale={1.5}
            >
              <mesh
                geometry={nodes.vampire_object.geometry}
                material={materials.vampire_material1}
              />
              <mesh
                geometry={nodes.vampire_object_1.geometry}
                material={materials.vampire_material2}
              />
            </group>
          </>
        );
      case "5":
        // 랜덤(당근)
        return (
          <>
            <mesh
              geometry={nodes.carrot.geometry}
              material={materials.carrot_material}
              position={[-0.91, 1.82, -0.79]}
              rotation={[-0.3, -0.09, 0.34]}
              scale={0.05}
            />
          </>
        );
    }
  };
  const props: any = { position };
  return (
    <group {...props} dispose={null}>
      {selectGlasses()}
      {selectHat()}
      {selectWing()}
      <mesh
        geometry={nodes.Head.geometry}
        material={materials["bunny texturee"]}
        position={[0.03, 2.62, 0.02]}
        rotation={[0, -Math.PI / 4, 0]}
        scale={[1.17, 0.91, 0.94]}
      />
      <mesh
        geometry={nodes.Body.geometry}
        material={materials["Material.009"]}
        position={[0.04, 1.36, 0.01]}
        rotation={[0, -Math.PI / 4, 0]}
        scale={[0.62, 0.67, 0.61]}
      />
      <mesh
        geometry={nodes.mouth.geometry}
        material={materials["Material.010"]}
        position={[0.05, 2.62, -0.01]}
        rotation={[0.17, -0.78, 0.12]}
        scale={[1.17, 0.91, 0.94]}
      />
      <mesh
        geometry={nodes.Ear_2.geometry}
        material={materials["Material.007"]}
        position={[0.04, 2.62, 0.01]}
        rotation={[0, -Math.PI / 4, 0]}
        scale={[1.17, 0.91, 1]}
      />
      <mesh
        geometry={nodes.body_2.geometry}
        material={materials["Material.008"]}
        position={[0.01, 1.36, 0.04]}
        rotation={[0, -Math.PI / 4, 0]}
        scale={[0.56, 0.6, 0.55]}
      />
      <mesh
        geometry={nodes.eyes.geometry}
        material={materials["Material.002"]}
        position={[0.04, 0.44, 0.01]}
        rotation={[0, -Math.PI / 4, 0]}
      />
      <mesh
        geometry={nodes.tail.geometry}
        material={materials["Material.008"]}
        position={[0.45, 1.31, -0.4]}
        rotation={[0, -Math.PI / 4, 0]}
        scale={0.22}
      />
      <mesh
        geometry={nodes.moustache.geometry}
        material={materials["Material.001"]}
        position={[0.05, 0.31, 0.01]}
        rotation={[0, -Math.PI / 4, 0]}
      />
      <mesh
        geometry={nodes.eyebrow.geometry}
        material={materials["Material.003"]}
        position={[0.04, 0.44, 0.01]}
        rotation={[0, -Math.PI / 4, 0]}
      />
      <mesh
        geometry={nodes.nose.geometry}
        material={materials["Material.007"]}
        position={[-0.57, 2.47, 0.62]}
        rotation={[-0.47, -0.73, -0.33]}
        scale={0.08}
      />
    </group>
  );
}

useGLTF.preload("/3D/custom_rabbit.glb");
